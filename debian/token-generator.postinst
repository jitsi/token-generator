#!/bin/bash
# postinst script for jitsi-meet
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

case "$1" in
    configure)
        # we don't want to start the daemon as root
        if ! getent group jitsi > /dev/null ; then
            groupadd jitsi
        fi
        if ! getent passwd token-generator > /dev/null ; then
            useradd -r -g jitsi --shell /bin/bash --create-home -d /usr/share/token-generator token-generator
        fi
        if ! groups token-generator | grep '\bjitsi\b' > /dev/null ; then
            usermod -g jitsi token-generator
        fi

        # we create home folder only if it doesn't exist
        if [ ! -d /usr/share/token-generator ]; then
            mkdir -p /usr/share/token-generator
        fi

        # we claim the home folder of token-generator in case it is owned by someone else
        OWNER=$(stat -c '%U' /usr/share/token-generator)
        GROUP=$(stat -c '%G' /usr/share/token-generator)
        if ! dpkg-statoverride --list /usr/share/token-generator/* >/dev/null && [ "$OWNER:$GROUP" != "token-generator:jitsi" ]; then
            chown -R token-generator:jitsi /usr/share/token-generator
            OWNER=token-generator
            GROUP=jitsi
        fi

        CONFIG_DIR="/etc/jitsi/token-generator"

        if ! [ -f $CONFIG_DIR ]; then
            mkdir -p $CONFIG_DIR
        fi

        if ! dpkg-statoverride --list "$CONFIG_DIR" >/dev/null; then
            chown token-generator:$GROUP "$CONFIG_DIR"
            chmod 750 "$CONFIG_DIR"
        fi

        # loading debconf
        . /usr/share/debconf/confmodule

        # try to get host from jitsi-videobridge
        db_get jitsi-videobridge/jvb-hostname
        if [ -z "$RET" ] ; then
            RET="jitsi-meet.example.com"
            echo "Warning! Fallback to default jitsi-meet FQN:${RET}"
        fi
        JVB_HOSTNAME=$(echo "$RET" | xargs echo -n)

        db_get token-generator/private-key || true
        CUSTOM_PRIVATE_KEY=$RET

        db_get token-generator/kid || true
        CUSTOM_KID=$RET

        CURRENT_DATE=$(date '+%Y-%m-%d')
        ASAP_JWT_KID="jitsi-meet/jwt-${CURRENT_DATE}"
        CLIENT_SIGNING_KEY_FILE="${CONFIG_DIR}/client.key"

        if [ -f ${CUSTOM_PRIVATE_KEY} ] && [ ! -z "${CUSTOM_KID}" ]; then
            echo "Processing supplied arguments! Copying private key ${CUSTOM_PRIVATE_KEY} to ${CONFIG_DIR}."
            cp ${CUSTOM_PRIVATE_KEY} ${CLIENT_SIGNING_KEY_FILE}
            chown token-generator:$GROUP ${CLIENT_SIGNING_KEY_FILE}
            ASAP_JWT_KID="${CUSTOM_KID}"

            # Let's reset the values so we don't get them on next update
            db_reset token-generator/private-key
            db_reset token-generator/kid
        fi

        # and we're done with debconf
        db_stop

        SYSTEM_ASAP_KID="jitsi/jwt-${CURRENT_DATE}"

        ASAP_SIGNING_KEY_FILE="${CONFIG_DIR}/asap.key"
        ASAP_PUBLIC="${CONFIG_DIR}/asap.pem"
        # let's generate asap key pair if it is not available
        if [ ! -f $ASAP_SIGNING_KEY_FILE ] ; then
            CURRENT_KEY_FILE="${CONFIG_DIR}/asap-${CURRENT_DATE}.key"
            CURRENT_PUBLIC="${CONFIG_DIR}/asap-${CURRENT_DATE}.pem"
            openssl genrsa -out $CURRENT_KEY_FILE 4096
            openssl rsa -in $CURRENT_KEY_FILE -pubout -outform PEM -out $CURRENT_PUBLIC
            echo "----------------"
            echo ""
            echo "We generated a private/public pair to be used by the sidecar."
            echo ""
            echo "----------------"

            ln -s ${CURRENT_KEY_FILE} ${ASAP_SIGNING_KEY_FILE}
            ln -s ${CURRENT_PUBLIC} ${ASAP_PUBLIC}
            chown token-generator:$GROUP "$CONFIG_DIR"/*

            # We expose the public key via jitsi-meet
            JITSI_MEET_CONFIG_DIR="/etc/jitsi/meet";
            PUBLIC_KEYS_LOCATION="${JITSI_MEET_CONFIG_DIR}/public";
            if [ -d $ASAP_SIGNING_KEY_FILE ] ; then
                mkdir -p ${PUBLIC_KEYS_LOCATION}
                PUB_KEY_NAME=$(echo -n ${SYSTEM_ASAP_KID} | sha256sum)
                ln -s ${ASAP_PUBLIC} "${PUBLIC_KEYS_LOCATION}/${PUB_KEY_NAME}.pem"
            fi
        fi

        CLIENT_PUBLIC="${CONFIG_DIR}/client.pem"
        # let's generate key pair for the generation of the client tokens
        if [ ! -f $CLIENT_SIGNING_KEY_FILE ] ; then
            CURRENT_KEY_FILE="${CONFIG_DIR}/client-${CURRENT_DATE}.key"
            CURRENT_PUBLIC="${CONFIG_DIR}/client-${CURRENT_DATE}.pem"
            openssl genrsa -out $CURRENT_KEY_FILE 4096
            openssl rsa -in $CURRENT_KEY_FILE -pubout -outform PEM -out $CURRENT_PUBLIC
            ln -s ${CURRENT_KEY_FILE} ${CLIENT_SIGNING_KEY_FILE}
            ln -s ${CURRENT_PUBLIC} ${CLIENT_PUBLIC}

            chown token-generator:$GROUP "$CONFIG_DIR"/*
        fi

        TOKEN_CONFIG="${CONFIG_DIR}/config"
        if [ ! -f $TOKEN_CONFIG ] ; then
            cp /usr/share/token-generator/env.example $TOKEN_CONFIG
            sed -i s#ASAP_JWT_KID=#ASAP_JWT_KID=\"${ASAP_JWT_KID}\"#g $TOKEN_CONFIG
            sed -i s#ASAP_SIGNING_KEY_FILE=#ASAP_SIGNING_KEY_FILE=${CLIENT_SIGNING_KEY_FILE}#g $TOKEN_CONFIG
            sed -i s#SYSTEM_ASAP_BASE_URL_MAPPINGS=#SYSTEM_ASAP_BASE_URL_MAPPINGS=[\{\"kid\":\"${SYSTEM_ASAP_KID}\",\"baseUrl\":\"https://${JVB_HOSTNAME}/_api/public\"\}]#g $TOKEN_CONFIG
            sed -i s/SYSTEM_ASAP_JWT_ACCEPTED_HOOK_ISS=/SYSTEM_ASAP_JWT_ACCEPTED_HOOK_ISS=\"jitsi-token-generator\"/g $TOKEN_CONFIG
            sed -i s/SYSTEM_ASAP_JWT_AUD=/SYSTEM_ASAP_JWT_AUD=\"jitsi\"/g $TOKEN_CONFIG
        fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0

